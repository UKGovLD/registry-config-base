## Fetch and render data for the URI or entity
##
## Input parameters:
##   $uri     - the requested URI, relative to the registry root (generated by registry-core)
##   $entity  - the URI of a external entity to be displayed, passed as a query parameter, overrides the $uri (confusing choice given $entity is also used internally)
##   $language - the language to display (extracted from browser request local?)
##
## Sets up the parameters to be passed into the item rendering
##   $item     - RDF node for the RegisterItem being viewed
##   $entity   - RDF node for the entity corresponding to this item
##   $register - if the entity is a register then this the RDF node for the register 

## Fetch the appropriate RDF view of the item

    #if($page)
      #set( $paging="_page=$page" )
    #else
      #set( $paging="firstPage" )
    #end

    #if($entity)
      #set( $response = $registry.perform("Read","$uri?entity=$entity&_view=with_metadata&status=any&$paging", $requestor) ) 
      #set( $target = $entity )
      #set( $uri = $entity )
    #else
      #if( $subject.isAuthenticated() )
        #set( $response = $registry.perform("Read","$uri?_view=with_metadata&status=any&$paging", $requestor) )
      #else
        #set( $response = $registry.perform("Read","$uri?_view=with_metadata&status=accepted&$paging", $requestor) )
      #end
      #set( $versionNumber = $lib.regex($uri,".*:(\d+)$") )
      #if( $versionNumber )
        #set( $versionNumber = $versionNumber[0] )
        #set( $uri = $lib.replaceAll($uri,":\d+$","") )
      #end
      #set( $target = "$registry.baseURI/$uri" )
    #end

## Parse the view response

    #if($response.status == 404)
      #parse( "main/_not-found.vm" )

    #elseif($response.status >= 500)
      #parse( "main/_internal-error.vm" )

    #else
      ## At this point should have a successful RDF description
      ## $target will be set to the URI of the target resource
      ## $verionNumber will be set to a version number for the resource, if any

      #set( $model = $response.entity )
      $model.setLanguage( $language )
      #set( $node = $model.getNode($target) )

      #if($node.hasResourceValue("rdf:type","reg:Register"))
        ## A register
        #set( $register = $node )
        #set( $entity = $register )
        #set( $item = $model.getNode($node.uRI.replaceAll("/([^/]*)$", "/_$1")) )

        #parse( "main/_item-render.vm" )

      #elseif($node.hasResourceValue("rdf:type","reg:RegisterItem"))
        ## a RegisterItem which might in turn point to a register or a real entity
        #set( $item = $node )
        #set( $entity = $item.connectedNodes("reg:definition/reg:entity").get(0) )
        #if( $entity.hasResourceValue("rdf:type","reg:Register") )
          ## Render as a register
          #set( $register = $entity )
          #parse( "main/_item-render.vm" )

        #else
          #parse( "main/_item-render.vm" )
        #end

      #else
        ## An entity - may be an external resource entity or may be an registerItem in disguise
        #set( $entity = $node)
        #set( $items = $node.connectedNodes("^reg:entity/^reg:definition") )
        #if( !$items.isEmpty() )
          ## It's an entity for which we've now found the corresponding RegisterItem
          #set( $item = $items.get(0) )
          #if( $item.isAnon() )
            ## No URI to work with so render as a pure (external) resource
            #parse("main/_resource-render.vm")

          #else
            #parse( "main/_item-render.vm" )

          #end

        #else
          ## No corresponding RegisterItem so render as a pure (external) resource
          #parse("main/_resource-render.vm")

        #end

      #end

    #end