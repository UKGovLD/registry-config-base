## Fetch data for the URI or entity, ready for rendering.
## If there is an error then renders the error response
##
## Input parameters:
##   $uri     - the requested URI, relative to the registry root (generated by registry-core)
##   $entity  - now ignored, entity checks possible via check URI function
##   $language - the language to display (extracted from browser request local?)
##   $showStatus - option parameter to set level of item status to show
##
## Sets up the parameters to be passed into the item rendering
##   $item     - RDF node for the RegisterItem being viewed
##   $entity   - RDF node for the entity corresponding to this item
##   $register - if the entity is a register then this the RDF node for the register 
##   $model    - RDF model containing the entity description
##   $render   - one of "item", "resource" or false (if there was an error)

## Fetch the appropriate RDF view of the item

    #if($page)
      #set( $paging="_page=$page" )
    #else
      #set( $paging="firstPage" )
    #end

    #if( $subject.isAuthenticated() )
      #set( $visibleStatus = "any" )
    #else
      #if( ! $showStatus )
        #set( $showStatus = "accepted" )
        #if( $registry.configExtensions.showStatus )
            #set( $showStatus = $registry.configExtensions.showStatus )
        #end
        #set ( $visibleStatus = $showStatus )
      #end
    #end
    #set( $response = $registry.perform("Read","$uri?_view=with_metadata&status=$visibleStatus&$paging", $requestor) )
    #set( $versionNumber = $lib.regex($uri,".*:(\d+)$") )
    #if( $versionNumber )
      #set( $versionNumber = $versionNumber[0] )
      #set( $uri = $lib.replaceAll($uri,":\d+$","") )
    #end
    #set( $target = "$registry.baseURI/$uri" )

## Parse the view response

    #if($response.status == 404)
      #set( $render = "not-found" )

    #elseif($response.status >= 500)
      #set( $render = "error" )

    #else
      #set( $model = $response.entity )
      #if(${model.model.size()} == 0)
        #set( $render = "not-found" )
      #else
        ## At this point should have a successful RDF description
        ## $target will be set to the URI of the target resource
        ## $verionNumber will be set to a version number for the resource, if any
        #set( $render = "item" )

        $model.setLanguage( $language )
        #set( $node = $model.getNode($target) )

        #if($node.hasResourceValue("rdf:type","reg:Register"))
          ## A register
          #set( $register = $node )
          #set( $entity = $register )
          #set( $item = $model.getNode($node.uRI.replaceAll("/([^/]*)$", "/_$1")) )

        #elseif($node.hasResourceValue("rdf:type","reg:RegisterItem"))
          ## a RegisterItem which might in turn point to a register or a real entity
          #set( $item = $node )
          #set( $entity = $item.connectedNodes("reg:definition/reg:entity").get(0) )
          #if( $entity.hasResourceValue("rdf:type","reg:Register") )
            ## Render as a register
            #set( $register = $entity )
          #end

        #else
          ## An entity - may be an external resource entity or may be an registerItem in disguise
          #set( $entity = $node)
          #set( $items = $node.connectedNodes("^reg:entity/^reg:definition") )
          #if( !$items.isEmpty() )
            ## It's an entity for which we've now found the corresponding RegisterItem
            #set( $item = $items.get(0) )
            #if( $item.isAnon() )
              ## No URI to work with so render as a pure (external) resource
              #set( $render = "resource" )
            #end
          #else
            ## No corresponding RegisterItem so render as a pure (external) resource
              #set( $render = "resource" )
          #end
        #end
      #end

    #end
